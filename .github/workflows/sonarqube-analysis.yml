name: SonarCloud

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        language: ["cpp"]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://git.io/codeql-language-support
        compiler:
          # you can specify the version after `-` like "llvm-13.0.0".
          - gcc-14
        generator:
          - "Ninja Multi-Config"
        build_type:
          - Debug
        qt_host:
          - linux
        qt_arch:
          - linux_gcc_64
        gcov_executable:
          - gcov-14

    steps:
      - name: Install dependencies
        run: sudo apt-get install -y libxcb-xinerama0 libxkbcommon-dev libxkbcommon-x11-dev

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.compiler }}
          build_type: ${{ matrix.build_type }}
          generator: ${{ matrix.generator }}

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: false
          cmake: true
          ninja: true
          vcpkg: false
          ccache: true
          clangtidy: false
          cppcheck: false
          gcovr: true
          opencppcoverage: false

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: "6.8.0"
          host: ${{ matrix.qt_host }}
          target: "desktop"
          arch: ${{ matrix.qt_arch }}
          install-deps: "true"
          cache: "true"
          aqtversion: "==3.1.*"
          py7zrversion: "==0.20.*"

      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v3

      - name: Create Build Environment
        run: cmake -E make_directory ${{ runner.workspace }}/build

      - name: Configure CMake
        working-directory: ${{ runner.workspace }}/build
        run: |
          cmake -G "${{ matrix.generator }}" $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE:STRING=${{ matrix.build_type }} -DENABLE_CACHE:BOOL=ON -DCOMPILE_TESTS:BOOL=${{ matrix.build_type == 'Debug' }} -DENABLE_COVERAGE:BOOL=${{ matrix.build_type == 'Debug' }}

      - name: Build
        working-directory: ${{ runner.workspace }}/build
        run: cmake --build . --parallel ${{ env.nproc }} --config ${{ matrix.build_type }}

      - name: Coverage
        if: ${{ matrix.build_type == 'Debug' }}
        working-directory: ${{ runner.workspace }}/build
        run: |
          ctest -C ${{ matrix.build_type }}
          gcovr -j ${{ env.nproc }} --delete --root ${{ runner.workspace }} --print-summary --xml-pretty --sonarqube coverage.xml . --gcov-executable '${{ matrix.gcov_executable }}'

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.cfamily.compile-commands="${{ runner.workspace }}/build/compile_commands.json" --define sonar.coverageReportPaths="${{ runner.workspace }}/build/coverage.xml"
