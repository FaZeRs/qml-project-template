name: ci
on:
  pull_request:
    branches: [main]
    paths-ignore:
      - "README.md"
      - "LICENSE"
  release:
    types: [published]
  push:
    tags:
      - "*"
    branches:
      - main
      - develop

env:
  VERBOSE: 1

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest
          - ubuntu-24.04
          - macos-latest
        compiler:
          - llvm-19
          - gcc-14
        generator:
          - "Ninja Multi-Config"
        build_type:
          - Release
          - Debug
        exclude:
          - os: windows-latest
            compiler: gcc-14
          - os: windows-latest
            compiler: llvm-19
          - os: macos-latest
            compiler: gcc-14
          - os: macos-latest
            compiler: llvm-19
        include:
          - os: ubuntu-24.04
            qt_host: linux
            qt_arch: linux_gcc_64

          - os: macos-latest
            compiler: llvm-18
            generator: "Ninja Multi-Config"
            qt_host: mac
            qt_arch: clang_64
            build_type: Release

          - os: macos-latest
            compiler: llvm-18
            generator: "Ninja Multi-Config"
            qt_host: mac
            qt_arch: clang_64
            build_type: Debug

          - os: windows-latest
            compiler: msvc
            generator: "Visual Studio 17 2022"
            qt_host: windows
            qt_arch: win64_msvc2022_64
            build_type: Release

          - os: windows-latest
            compiler: msvc
            generator: "Visual Studio 17 2022"
            qt_host: windows
            qt_arch: win64_msvc2022_64
            build_type: Debug

          - compiler: gcc-14
            gcov_executable: gcov-14

          - compiler: llvm-19
            gcov_executable: "llvm-cov gcov"

    steps:
      - name: Install dependencies
        if: ${{ contains(matrix.os, 'ubuntu') }}
        run: sudo apt-get install -y libxcb-xinerama0 libxkbcommon-dev libxkbcommon-x11-dev doxygen graphviz

      - uses: actions/checkout@v4

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.compiler }}
          build_type: ${{ matrix.build_type }}
          generator: ${{ matrix.generator }}

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}
          cmake: true
          ninja: true
          ccache: ${{ contains(matrix.os, 'ubuntu') || contains(matrix.os, 'windows') }}
          clangtidy: ${{ contains(matrix.os, 'ubuntu') || contains(matrix.os, 'windows') }}
          cppcheck: ${{ contains(matrix.os, 'ubuntu') || contains(matrix.os, 'windows') }}
          gcovr: ${{ contains(matrix.os, 'ubuntu') }}
          opencppcoverage: ${{ contains(matrix.os, 'windows') }}
          doxygen: ${{ matrix.build_type == 'Release' && contains(matrix.os, 'ubuntu') }}
          graphviz: ${{ matrix.build_type == 'Release' && contains(matrix.os, 'ubuntu') }}

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: "6.8.0"
          host: ${{ matrix.qt_host }}
          target: "desktop"
          arch: ${{ matrix.qt_arch }}
          install-deps: "true"
          cache: "true"
          tools: "tools_ifw"
          set-env: "true"
          aqtversion: "==3.1.*"
          py7zrversion: "==0.20.*"

      - name: Create Build Environment
        run: cmake -E make_directory ${{ runner.workspace }}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{ runner.workspace }}/build
        run: |
          cmake -G "${{ matrix.generator }}" $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE:STRING=${{ matrix.build_type }} -DENABLE_COVERAGE:BOOL=${{ matrix.build_type == 'Debug' }} -DENABLE_DOCS:BOOL=${{ matrix.build_type == 'Release' && contains(matrix.os, 'ubuntu') && contains(matrix.compiler, 'gcc') }} -DCPACK_IFW_ROOT=$IQTA_TOOLS/QtInstallerFramework/4.7/bin

      - name: Build
        working-directory: ${{ runner.workspace }}/build
        shell: bash
        run: cmake --build . --parallel ${{ env.nproc }} --config ${{ matrix.build_type }}

      - name: Ubuntu - Test and coverage
        if: ${{ contains(matrix.os, 'ubuntu') && matrix.build_type == 'Debug' }}
        working-directory: ${{ runner.workspace }}/build
        shell: bash
        run: |
          ctest -C ${{ matrix.build_type }}
          gcovr -j ${{ env.nproc }} --delete --root ../ --print-summary --xml-pretty --xml coverage.xml . --gcov-executable '${{ matrix.gcov_executable }}'

      - name: Windows - Test and coverage
        if: ${{ contains(matrix.os, 'windows') && matrix.build_type == 'Debug' }}
        working-directory: ${{ runner.workspace }}/build
        shell: bash
        run: |
          OpenCppCoverage.exe --export_type cobertura:coverage.xml --cover_children -- ctest -C ${{matrix.build_type}}

      - name: CPack
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.build_type == 'Release' }}
        working-directory: ${{ runner.workspace }}/build
        shell: bash
        run: |
          cpack -C ${{ matrix.build_type }}

      - name: Publish Tagged Release
        uses: softprops/action-gh-release@v2
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.build_type == 'Release' }}
        with:
          files: |
            ${{ runner.workspace }}/build/MyProject-*${{ github.ref_name }}-*.*

      - name: Publish to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        if: ${{ github.ref == 'refs/heads/main' && matrix.build_type == 'Release' && contains(matrix.os, 'ubuntu') && contains(matrix.compiler, 'gcc') }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ runner.workspace }}/build/html

      - name: Publish to codecov
        if: ${{ (contains(matrix.os, 'ubuntu') || contains(matrix.os, 'windows')) && matrix.build_type == 'Debug' }}
        uses: codecov/codecov-action@v4
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ${{ runner.workspace }}/build/coverage.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
